#include <Servo.h>

// Arduino pin assignment
#define PIN_LED   9   // LED active-low
#define PIN_TRIG  12  // sonar sensor TRIGGER
#define PIN_ECHO  13  // sonar sensor ECHO
#define PIN_SERVO 10  // servo motor

// Configurable parameters for sonar
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 25       // sampling interval (unit: msec)
#define PULSE_DURATION 10 // ultra-sound Pulse Duration (unit: usec)
#define _DIST_MIN 180.0   // minimum distance to be measured (unit: mm)
#define _DIST_MAX 360.0   // maximum distance to be measured (unit: mm)

#define TIMEOUT ((INTERVAL / 2) * 1000.0) // maximum echo waiting time (unit: usec)
#define SCALE (0.001 * 0.5 * SND_VEL)     // coefficient to convert duration to distance

#define _EMA_ALPHA 0.1    // EMA weight of new sample (range: 0 to 1)
                          
// Global variables
float dist_ema, dist_prev = _DIST_MAX; // unit: mm
unsigned long last_sampling_time;      // unit: ms

Servo myservo;

void setup() {
  // Initialize GPIO pins
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);  // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);   // sonar ECHO
  digitalWrite(PIN_TRIG, LOW);  // turn-off Sonar

  myservo.attach(PIN_SERVO); 
  myservo.write(90);            // Initialize to neutral

  dist_prev = _DIST_MIN; // raw distance output from USS (unit: mm)
  Serial.begin(57600);
}

void loop() {
  float dist_raw;

  // wait until next sampling time. 
  if (millis() < (last_sampling_time + INTERVAL))
    return;

  dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);


  if (dist_raw < _DIST_MIN) {
    dist_raw = dist_prev;
    digitalWrite(PIN_LED, LOW); 
  } else if (dist_raw > _DIST_MAX) {
    dist_raw = dist_prev;
    digitalWrite(PIN_LED, LOW);
  } else {
    dist_prev = dist_raw;
    digitalWrite(PIN_LED, HIGH); 
  }

  // Apply EMA filter
  dist_ema = dist_raw * _EMA_ALPHA + (1 - _EMA_ALPHA) * dist_ema;


  int servo_angle;
  if (dist_ema <= _DIST_MIN) {
    servo_angle = 0; 
  } else if (dist_ema >= _DIST_MAX) {
    servo_angle = 180;
  } else {
  
    servo_angle = map(dist_ema, _DIST_MIN, _DIST_MAX, 0, 180);
  }
  myservo.write(servo_angle);

  
  Serial.print("Min:");  Serial.print(_DIST_MIN);
  Serial.print(",dist:"); Serial.print(dist_raw);
  Serial.print(",ema:"); Serial.print(dist_ema);
  Serial.print(",Servo:"); Serial.print(servo_angle);
  Serial.print(",Max:"); Serial.print(_DIST_MAX);
  Serial.println("");

  last_sampling_time += INTERVAL;
}


float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);
  
  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; 
}
